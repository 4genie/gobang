{"version":3,"sources":["utils.js","useBoard.js","Square.js","App.js","index.js"],"names":["countTotal","board","currentY","currentX","directionY","directionX","currentPlayer","tempX","tempY","total","useBoard","status","useState","Array","fill","boardSquares","setBoardSquares","blackIsNext","setBlackisNext","winner","setWinner","handleClick","x","y","squares","JSON","parse","stringify","calculateWinner","handleRestart","window","location","reload","Col","styled","div","props","$row","$col","Pawn","$color","Square","row","col","onClick","value","Title","h1","Status","Button","button","BoardBox","Row","App","map","yIndex","xIndex","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f99968b.chunk.js","sourcesContent":["// 計算某方向的棋子也是相同棋子的連續數目\r\nfunction countTotal(board, currentY, currentX, directionY, directionX) {\r\n  // 目前的棋子\r\n  const currentPlayer = board[currentY][currentX];\r\n\r\n  let tempX = currentX;\r\n  let tempY = currentY;\r\n\r\n  // 設定一開始連續的棋子數為 0\r\n  let total = 0;\r\n\r\n  // 利用 do... while 迴圈，找出此棋子的某方向棋子\r\n  do {\r\n    tempX += directionX;\r\n    tempY += directionY;\r\n\r\n    // 如果某方向棋子的橫線軸在棋盤範圍，且與此棋子相同（例如：同是 '黑子' 或同是'白子'）\r\n    if (board[tempY] && board[tempY][tempX] === currentPlayer) {\r\n      // 連續的棋子數 +1\r\n      total++;\r\n    } else {\r\n      // 否則 => 停止迴圈\r\n      break;\r\n    }\r\n    // 如果為 true，繼續朝這個方向找下一個\r\n  } while (true);\r\n\r\n  // 迴圈結束時，回傳連續的棋子數\r\n  return total;\r\n}\r\n\r\n// 找出某棋子的各方向是否有連續超過 4 個相同的棋子 （包含自己的話為 5 個）\r\nexport default function calculateWinner(board, y, x) {\r\n  if (\r\n    // 上到下\r\n    countTotal(board, y, x, 1, 0) + countTotal(board, y, x, -1, 0) >= 4 ||\r\n    // 右到左\r\n    countTotal(board, y, x, 0, 1) + countTotal(board, y, x, 0, -1) >= 4 ||\r\n    // 右下到左上\r\n    countTotal(board, y, x, 1, 1) + countTotal(board, y, x, -1, -1) >= 4 ||\r\n    // 左下到右上\r\n    countTotal(board, y, x, 1, -1) + countTotal(board, y, x, -1, 1) >= 4\r\n  ) {\r\n    // 有的話 => 回傳自己棋子的值\r\n    return board[y][x];\r\n  }\r\n}\r\n","import { useState } from 'react';\r\nimport calculateWinner from './utils';\r\n\r\n// 設定棋盤的大小\r\nconst range = 19;\r\n\r\nexport default function useBoard() {\r\n  // state\r\n  // 棋盤的 State\r\n  const [boardSquares, setBoardSquares] = useState(\r\n    Array(range).fill(Array(range).fill(null))\r\n  );\r\n  // 棋手輪流的 State\r\n  const [blackIsNext, setBlackisNext] = useState(true);\r\n  // 勝者的 State\r\n  const [winner, setWinner] = useState(null);\r\n\r\n  // 點擊棋盤後執行 handleClick()\r\n  const handleClick = (x, y) => {\r\n    // 複製 boardSquares 的 state\r\n    const squares = JSON.parse(JSON.stringify(boardSquares));\r\n\r\n    // 如果有人贏了，或者這個位置已有棋子，return\r\n    if (winner || squares[y][x]) return;\r\n\r\n    // 否則就在這個位置上棋子賦予 'black' 或 'white' 的值\r\n    squares[y][x] = blackIsNext ? 'black' : 'white';\r\n\r\n    // 更新 boardSquares 的 state\r\n    setBoardSquares(squares);\r\n    // 檢查是否有人獲勝\r\n    setWinner(calculateWinner(squares, y, x));\r\n    // 下一手輪到對方\r\n    setBlackisNext(!blackIsNext);\r\n  };\r\n\r\n  // 點擊 '重新開始'按鈕後 => 重新整理頁面，資料清空\r\n  const handleRestart = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  // 設定變數 status\r\n  // 當有勝負結果時，顯示獲勝者\r\n  // 否則提示誰是下一手棋手\r\n  let status;\r\n  status = winner\r\n    ? `獲勝的是 ： ${winner === 'black' ? '黑子' : '白子'}`\r\n    : `下一手 : ${blackIsNext ? '黑子' : '白子'}`;\r\n\r\n  return {\r\n    boardSquares,\r\n    handleClick,\r\n    handleRestart,\r\n    status,\r\n  };\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Col = styled.div`\r\n  width: 24px;\r\n  height: 24px;\r\n  background: #c19d38;\r\n  position: relative;\r\n  z-index: 0;\r\n\r\n  // 畫棋盤的縱線\r\n  &::before {\r\n    content: '';\r\n    height: 100%;\r\n    width: 2px;\r\n    background: black;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n\r\n    // 縱線上邊第一格回縮 50 %，讓范圍在棋盤中\r\n    ${(props) =>\r\n      props.$row === 0 &&\r\n      `\r\n      top: 50%;\r\n    `}\r\n\r\n    // 縱線下邊最後一格回縮 50 %，讓范圍在棋盤中\r\n    ${(props) =>\r\n      props.$row === 18 &&\r\n      `\r\n      height: 50%;\r\n    `}\r\n  }\r\n\r\n  // 畫棋盤的橫線\r\n  &::after {\r\n    content: '';\r\n    width: 100%;\r\n    height: 2px;\r\n    background: black;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 0;\r\n    transform: translateY(-50%);\r\n\r\n    // 橫線左邊第一格回縮 50 %，讓范圍在棋盤中\r\n    ${(props) =>\r\n      props.$col === 0 &&\r\n      `\r\n      left: 50%;\r\n    `}\r\n\r\n    // 橫線右邊最後一格回縮 50 %，讓范圍在棋盤中\r\n    ${(props) =>\r\n      props.$col === 18 &&\r\n      `\r\n      width: 50%;\r\n    `}\r\n  }\r\n`;\r\n\r\nconst Pawn = styled.div`\r\n  content: '';\r\n  background-color: ${(props) =>\r\n    props.$color === 'black' ? 'black' : 'white'};\r\n  width: 25px;\r\n  height: 25px;\r\n  border: 0;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  // 棋子的大小\r\n  transform: scale(0.8);\r\n  // 讓棋子在棋盤的上一層顯示\r\n  z-index: 1;\r\n`;\r\n\r\n//每一個棋盤與棋子\r\n//接收 App.js 傳入的 props\r\nexport default function Square({ row, col, onClick, value }) {\r\n  // 棋盤上點擊時，執行 onClick(), 並將 col、 row 的值帶入\r\n  const handleChessClick = () => {\r\n    onClick(col, row);\r\n  };\r\n\r\n  return (\r\n    <Col $col={col} $row={row} onClick={handleChessClick}>\r\n      {value && <Pawn $color={value} />}\r\n    </Col>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport useBoard from './useBoard';\r\nimport Square from './Square';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Title = styled.h1`\r\n  margin-top: 20px;\r\n  text-align: center;\r\n  font-weight: 600;\r\n`;\r\nconst Status = styled.div`\r\n  text-align: center;\r\n  font-size: 16px;\r\n  letter-spacing: 2px;\r\n`;\r\nconst Button = styled.button`\r\n  margin-top: 10px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  outline: none;\r\n  padding: 8px 13px;\r\n  &:hover {\r\n    background-color: rgba(0, 0, 0, 0.1);\r\n  }\r\n  &:focus {\r\n    outline: 0;\r\n  }\r\n`;\r\nconst BoardBox = styled.div`\r\n  margin: 5px auto;\r\n  width: 500px;\r\n  height: 500px;\r\n  box-shadow: 3px 3px 8px 3px 3px;\r\n  border-radius: 10px;\r\n  padding: 5vmin;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport default function App() {\r\n  //從 useBoard.js 傳入 props\r\n  const { boardSquares, handleClick, handleRestart, status } = useBoard();\r\n\r\n  return (\r\n    <div>\r\n      <Title>五子棋</Title>\r\n\r\n      {/* 勝負狀態 */}\r\n      <Status>\r\n        <div>{status}</div>\r\n        <Button onClick={handleRestart}>重新開始</Button>\r\n      </Status>\r\n\r\n      {/* 五子棋盤 */}\r\n      <BoardBox>\r\n        {/* 找出棋盤中每一個 y 以及其順序的值（yIndex） */}\r\n        {/* 相當於找出每一個橫線軸 */}\r\n        {boardSquares.map((row, yIndex) => (\r\n          <Row key={yIndex}>\r\n            {/* 棋盤中每一個 x  以及其順序的值（xIndex）  */}\r\n            {/* 相當於在某橫線軸上，每條縱線軸的位置 */}\r\n            {row.map((col, xIndex) => (\r\n              // 顯示 Square 的 Component ,並將 props 值傳到 Square 中\r\n              <Square\r\n                key={xIndex}\r\n                row={yIndex}\r\n                col={xIndex}\r\n                onClick={handleClick}\r\n                value={boardSquares[yIndex][xIndex]}\r\n              ></Square>\r\n            ))}\r\n          </Row>\r\n        ))}\r\n      </BoardBox>\r\n    </div>\r\n  );\r\n}\r\n\r\nApp.propTypes = {\r\n  boardSquares: PropTypes.object,\r\n  handleClick: PropTypes.func,\r\n  handleRestart: PropTypes.func,\r\n  status: PropTypes.string,\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}